name: CI

on:
  push:


jobs:
  static-analysis:  # mypy, black, ruff 등 정적 분석
    runs-on: ubuntu-22.04  # 가상 운영체제 환경에서 실행됨. 실제 프롣덕션(배포)환경에서는 모든 버전을 고정하는 것이 좋다.
    # 예기치 못하게 버전이 올라가서 장애가 생기는 것을 막기 위해 버전을 고정
    steps:
      # 가장 최신 브랜치와 커밋을 가져옴
      - name: Check out the codes
        uses: actions/checkout@v2

      - name: Setup python environment
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "3.13"

      # 캐시 기능을 사용해 매번 설치하는 낭비를 줄임
      # key와 path는 필수
      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v3
        with:
          key: poetry-2.1.2  # 	캐시 구분용 키 (버전별로 다르게 구분)
          path: ~/.local/   # poetry는 ~/.local에 설치되므로, 이 디렉터리를 통째로 캐시할 것입니다.


      - name: Install Poetry
        # 캐시를 못 쓰는 경우에만 설치
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 2.1.2

      # poetry를 사용하기 위해 설정
      - name: Register Poetry bin
        run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        id: cache-venv
        uses: actions/cache@v3
        with:
          # 전체 파일을 비교하는 것보다 hash값만 비교하는게 빠름.
          key: python-${{ steps.setup-python.outputs.python-version }}-poetry-lock-${{ hashFiles('poetry.lock') }}-toml-${{ hashFiles('pyproject.toml') }}-poetry-2.1.2
          path: /home/runner/.cache/pypoetry/virtualenvs/

      - name: Install dependencies
        # 캐시를 못 쓰는 경우에만 설치
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --no-root

      # 코드 포메터 (black)으로 체크만 함.
      - name: Run Black
        run: poetry run black . --check

      - name: Run Ruff
        run: |
          poetry run ruff check --select I
          poetry run ruff check

      - name: Run Mypy
        run: poetry run mypy .


  test:   # 전체 테스트 실행
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the codes
        uses: actions/checkout@v2

      - name: Setup python environment
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "3.13"

      # 캐시 기능을 사용해 매번 설치하는 낭비를 줄임
      # key와 path는 필수
      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v3
        with:
          key: poetry-2.1.2  # 	캐시 구분용 키 (버전별로 다르게 구분)
          path: ~/.local/   # poetry는 ~/.local에 설치되므로, 이 디렉터리를 통째로 캐시할 것입니다.

      - name: Install Poetry
        # 캐시를 못 쓰는 경우에만 설치
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 2.1.2

      - name: Register Poetry bin
        run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        id: cache-venv
        uses: actions/cache@v3
        with:
          # 전체 파일을 비교하는 것보다 hash값만 비교하는게 빠름.
          key: python-${{ steps.setup-python.outputs.python-version }}-poetry-lock-${{ hashFiles('poetry.lock') }}-toml-${{ hashFiles('pyproject.toml') }}-poetry-2.1.2
          path: /home/runner/.cache/pypoetry/virtualenvs/


      - name: Install dependencies
        # 캐시를 못 쓰는 경우에만 설치
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: Run tests
        run: |
          poetry run coverage run -m pytest .
          poetry run coverage report -m

