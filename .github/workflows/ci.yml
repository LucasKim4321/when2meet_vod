name: CI

on:
  push:


jobs:
  static-analysis:  # mypy, black, ruff 등 정적 분석
    runs-on: ubuntu-22.04  # 가상 운영체제 환경에서 실행됨. 실제 프롣덕션(배포)환경에서는 모든 버전을 고정하는 것이 좋다.
    # 예기치 못하게 버전이 올라가서 장애가 생기는 것을 막기 위해 버전을 고정
    steps:
      # 가장 최신 브랜치와 커밋을 가져옴
      - name: Check out the codes
        uses: actions/checkout@v2

      - name: Setup python environment
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "3.13"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 2.1.2

      # poetry를 사용하기 위해 설정
      - name: Register Poetry bin
        run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-root

      # 코드 포메터 (black)으로 체크만 함.
      - name: Run Black
        run: poetry run black . --check

      - name: Run Ruff
        run: |
          poetry run ruff check --select I
          poetry run ruff check

      - name: Run Mypy
        run: poetry run mypy .


  test:   # 전체 테스트 실행
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the codes
        uses: actions/checkout@v2

      - name: Setup python environment
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "3.13"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 2.1.2

      - name: Register Poetry bin
        run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: Run tests
        run:
          poetry run coverage run -m pytest .
          poetry run coverage report -m

